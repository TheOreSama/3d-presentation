<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>3D-презентация: модуль — точки с описанием</title>
  <script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>
  <style>
    html,body{height:100%;margin:0;font-family:system-ui,Arial;background:#f8fafc}
    .app{display:grid;grid-template-columns:1fr 360px;grid-template-rows:auto 1fr;grid-template-areas:"hdr hdr" "stage panel";height:100%}
    header{grid-area:hdr;display:flex;align-items:center;gap:8px;padding:10px 16px;border-bottom:1px solid #ccc;background:#f1f5f9}
    .stage{grid-area:stage;position:relative;background:linear-gradient(to top right, #e2e8f0 0%, #f8fafc 40%, #ffffff 90%)}
    model-viewer{width:100%;height:100%}
    .panel{grid-area:panel;border-left:1px solid #ccc;display:flex;flex-direction:column;background:#f9fafb}
    .list{overflow:auto;padding:8px}
    .card{border:1px solid #ddd;border-radius:8px;padding:8px;margin:6px;background:#fffdfd;cursor:pointer;box-shadow:0 1px 2px rgba(0,0,0,0.04)}
    .card.active{outline:2px solid #333;background:#ffffff}
    .hotspot{--size:14px;width:var(--size);height:var(--size);border-radius:50%;border:2px solid #fff;background:#ef4444;box-shadow:0 0 0 2px rgba(0,0,0,.25)}
    #connector{position:fixed;inset:0;pointer-events:none}
    #connector line{stroke:#6b7280;stroke-width:2;stroke-dasharray:6 6;opacity:.9}
  </style>
</head>
<body>
<div class="app">
  <header>
    <h1>Модуль — интерактивная модель</h1>
  </header>

  <div class="stage">
    <model-viewer id="viewer" crossorigin="anonymous"
      src="https://TheOreSama.github.io/3d-presentation/modul.glb"
      camera-controls touch-action="pan-y" shadow-intensity="0.5" autoplay>
    </model-viewer>
  </div>

  <svg id="connector" width="100%" height="100%"><line id="connector-line" x1="0" y1="0" x2="0" y2="0" style="visibility:hidden"/></svg>

  <aside class="panel">
    <h3 style="margin:8px">Описание точек</h3>
    <div id="items" class="list"></div>
  </aside>
</div>

<script type="module">
  const viewer = document.getElementById('viewer');
  const list = document.getElementById('items');
  const line = document.getElementById('connector-line');

  let HOTSPOTS = [
    {id:'p1', title:'Механизм контроля ускорения', desc:'Узел подведения и распределения потоков внутри системы.', position:'-0.195m -0.009m -0.180m', normal:'-1.000m -0.000m -0.000m'},
    {id:'p2', title:'Двигатель АДТ', desc:'Зона обслуживания и осмотра оборудования.', position:'0.627m -0.105m -0.090m', normal:'0.000m 1.000m 0.000m'},
    {id:'p3', title:'Многоступенчатый вал', desc:'Измеряет параметры системы и передаёт сигналы на пульт управления.', position:'0.039m -0.001m -0.053m', normal:'0.864m -0.098m -0.493m'},
    {id:'p4', title:'Контроллер ускорения', desc:'Обеспечивает питание и коммутацию элементов установки.', position:'0.614m 0.066m 0.165m', normal:'0.000m 0.108m 0.994m'},
    {id:'p5', title:'Демпферные площадки', desc:'Финальный участок, выводящий обработанный продукт.', position:'0.128m 0.086m 0.098m', normal:'-0.168m -0.099m 0.981m'}
  ];
  let selectedId = null;

  (function seedPreset(){
    HOTSPOTS.forEach((h,i)=>{
      const btn=document.createElement('button');
      btn.className='hotspot';
      btn.setAttribute('slot',`hotspot-${i}`);
      btn.dataset.hotspotId=h.id;
      btn.setAttribute('data-position',h.position);
      btn.setAttribute('data-normal',h.normal);
      btn.setAttribute('aria-label',h.title);
      btn.onclick=()=>selectHotspot(h.id);
      viewer.appendChild(btn);
    });
    setTimeout(()=>{ try{ renderList(); }catch(e){} }, 0);
  })();

  function renderList(){
    list.innerHTML='';
    HOTSPOTS.forEach((h, idx)=>{
      const card=document.createElement('div');
      card.className='card'+(selectedId===h.id?' active':'');
      card.dataset.id=h.id;
      const title = h.title || ('Точка '+(idx+1));
      const desc  = h.desc  || '';
      card.innerHTML=`<strong>${title}</strong><br><small>${desc}</small>`;
      card.onclick=()=>selectHotspot(h.id);
      list.appendChild(card);
    });
  }

  function selectHotspot(id){
    selectedId=id;
    document.querySelectorAll('.card').forEach(c=>c.classList.toggle('active',c.dataset.id===id));
    drawConnector();
    if(isAutoRotating) startConnectorLoop();
  }

  function drawConnector(){
    if(!selectedId){line.style.visibility='hidden';return;}
    const dot=viewer.querySelector(`[data-hotspot-id="${selectedId}"]`);
    const card=[...document.querySelectorAll('.card')].find(c=>c.dataset.id===selectedId);
    if(!dot||!card){line.style.visibility='hidden';return;}
    const r1=dot.getBoundingClientRect();
    const r2=card.getBoundingClientRect();
    const x1=r1.left+r1.width/2;
    const y1=r1.top+r1.height/2;
    const x2=r2.left;
    const y2=r2.top+r2.height/2;
    line.setAttribute('x1',x1);
    line.setAttribute('y1',y1);
    line.setAttribute('x2',x2);
    line.setAttribute('y2',y2);
    line.style.visibility='visible';
  }

  window.addEventListener('resize',drawConnector);
  window.addEventListener('scroll',drawConnector,{passive:true});
  viewer.addEventListener('camera-change',drawConnector);

  // === Автовращение после 15 секунд бездействия ===
  let idleTimer;
  let isAutoRotating = false;
  let rafId = null; // цикл для обновления пунктира во время автоворота

  function startConnectorLoop(){
    if(rafId) return;
    const step = ()=>{ drawConnector(); rafId = requestAnimationFrame(step); };
    rafId = requestAnimationFrame(step);
  }
  function stopConnectorLoop(){
    if(rafId){ cancelAnimationFrame(rafId); rafId = null; }
  }

  function enableAutoRotate(){
    if(isAutoRotating) return;
    viewer.setAttribute('auto-rotate','');
    viewer.setAttribute('rotation-per-second','8deg'); // мягкое вращение
    isAutoRotating = true;
    startConnectorLoop(); // обновляем пунктир каждый кадр
  }
  function disableAutoRotate(){
    if(!isAutoRotating) return;
    viewer.removeAttribute('auto-rotate');
    isAutoRotating = false;
    stopConnectorLoop(); // можно остановить цикл; разово перерисуем
    drawConnector();
  }
  function restartIdleTimer(){
    clearTimeout(idleTimer);
    disableAutoRotate();
    idleTimer = setTimeout(enableAutoRotate, 15000);
  }

  // Сбрасываем таймер при любом взаимодействии
  ['pointerdown','wheel','keydown','touchstart'].forEach(evt=>{
    window.addEventListener(evt, restartIdleTimer, {passive:true});
  });
  // Также при начале вращения/панорамирования камерой
  viewer.addEventListener('camera-change', ()=>{
    // если пользователь двигает камеру, остановим автоворот и перезапустим таймер
    if(viewer.interactionPrompt === 'none'){} // no-op, но событие ловим
    restartIdleTimer();
  });

  // Запускаем таймер после загрузки модели
  viewer.addEventListener('load', ()=>{
    restartIdleTimer();
  });
</script>
</body>
</html>
