<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>3D-презентация: модуль — интерактивные точки</title>
  <script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>
  <style>
    html,body{height:100%;margin:0;font-family:system-ui,Arial}
    .app{display:grid;grid-template-columns:1fr 360px;grid-template-rows:auto 1fr;grid-template-areas:"hdr hdr" "stage panel";height:100%}
    header{grid-area:hdr;display:flex;align-items:center;gap:8px;padding:10px 16px;border-bottom:1px solid #ccc}
    .stage{grid-area:stage;position:relative;background:linear-gradient(to top, #e5e7eb 0%, #ffffff 60%)}
    model-viewer{width:100%;height:100%}
    .panel{grid-area:panel;border-left:1px solid #ccc;display:flex;flex-direction:column}
    .list{overflow:auto;padding:8px}
    .card{border:1px solid #ddd;border-radius:8px;padding:8px;margin:6px;background:#fff;cursor:pointer}
    .card.active{outline:2px solid #333}
    .hotspot{--size:14px;width:var(--size);height:var(--size);border-radius:50%;border:2px solid #fff;background:#ef4444;box-shadow:0 0 0 2px rgba(0,0,0,.25)}
    #connector{position:fixed;inset:0;pointer-events:none}
    #connector line{stroke:#6b7280;stroke-width:2;stroke-dasharray:6 6;opacity:.9}
  </style>
</head>
<body>
<div class="app">
  <header>
    <h1>Модуль — интерактивная модель</h1>
    <!--
    <label style="margin-left:auto;display:flex;align-items:center;gap:6px">
      <input id="placeMode" type="checkbox" />
      <span>Режим добавления (Ctrl+клик)</span>
    </label>
    -->
  </header>

  <div class="stage">
    <model-viewer id="viewer" crossorigin="anonymous"
      src="https://TheOreSama.github.io/3d-presentation/modul.glb"
      camera-controls touch-action="pan-y" shadow-intensity="0.5" autoplay>
    </model-viewer>
  </div>

  <svg id="connector" width="100%" height="100%"><line id="connector-line" x1="0" y1="0" x2="0" y2="0" style="visibility:hidden"/></svg>

  <aside class="panel">
    <h3 style="margin:8px">Описание точек</h3>
    <div id="items" class="list"></div>
    <!--
    <div style="padding:8px">
      <button class="btn" id="deleteSelected">Удалить выбранную</button>
      <button class="btn" id="clearAll">Удалить все</button>
    </div>
    -->
  </aside>
</div>

<script type="module">
  const viewer = document.getElementById('viewer');
  const list = document.getElementById('items');
  const line = document.getElementById('connector-line');

  const HOTSPOTS = [
    {id:'p1', title:'Входной модуль', desc:'Узел подведения и распределения потоков внутри системы.', position:'0.05m 0.02m 0.12m', normal:'0 1 0'},
    {id:'p2', title:'Сервисная площадка', desc:'Зона обслуживания и осмотра оборудования.', position:'0.28m 0.03m 0.18m', normal:'0 1 0'},
    {id:'p3', title:'Датчик контроля', desc:'Измеряет параметры системы и передаёт сигналы на пульт управления.', position:'-0.15m 0.04m 0.10m', normal:'0 1 0'},
    {id:'p4', title:'Силовой блок', desc:'Обеспечивает питание и коммутацию элементов установки.', position:'0.00m 0.015m -0.14m', normal:'0 1 0'},
    {id:'p5', title:'Выходной тракт', desc:'Финальный участок, выводящий обработанный продукт.', position:'-0.10m 0.03m -0.09m', normal:'0 1 0'}
  ];
  let selectedId = null;

  // создаём точки в model-viewer
  HOTSPOTS.forEach((h,i)=>{
    const btn=document.createElement('button');
    btn.className='hotspot';
    btn.setAttribute('slot',`hotspot-${i}`);
    btn.dataset.hotspotId=h.id;
    btn.setAttribute('data-position',h.position);
    btn.setAttribute('data-normal',h.normal);
    btn.setAttribute('aria-label',h.title);
    btn.onclick=()=>selectHotspot(h.id);
    viewer.appendChild(btn);
  });

  function renderList(){
    list.innerHTML='';
    HOTSPOTS.forEach(h=>{
      const card=document.createElement('div');
      card.className='card'+(selectedId===h.id?' active':'');
      card.dataset.id=h.id;
      card.innerHTML=`<strong>${h.title}</strong><br><small>${h.desc}</small>`;
      card.onclick=()=>selectHotspot(h.id);
      list.appendChild(card);
    });
  }
  renderList();

  function selectHotspot(id){
    selectedId=id;
    document.querySelectorAll('.card').forEach(c=>c.classList.toggle('active',c.dataset.id===id));
    drawConnector();
  }

  function drawConnector(){
    if(!selectedId){line.style.visibility='hidden';return;}
    const dot=viewer.querySelector(`[data-hotspot-id="${selectedId}"]`);
    const card=[...document.querySelectorAll('.card')].find(c=>c.dataset.id===selectedId);
    if(!dot||!card){line.style.visibility='hidden';return;}
    const r1=dot.getBoundingClientRect();
    const r2=card.getBoundingClientRect();
    const x1=r1.left+r1.width/2;
    const y1=r1.top+r1.height/2;
    const x2=r2.left;
    const y2=r2.top+r2.height/2;
    line.setAttribute('x1',x1);
    line.setAttribute('y1',y1);
    line.setAttribute('x2',x2);
    line.setAttribute('y2',y2);
    line.style.visibility='visible';
  }

  window.addEventListener('resize',drawConnector);
  viewer.addEventListener('camera-change',drawConnector);
</script>
</body>
</html>
